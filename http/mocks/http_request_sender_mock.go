// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nkasozi/refurbed-async-http-lib/http (interfaces: HttpRequestSender)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	http "net/http"
	reflect "reflect"
)

// MockHttpRequestSender is a mock of HttpRequestSender interface
type MockHttpRequestSender struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestSenderMockRecorder
}

// MockHttpRequestSenderMockRecorder is the mock recorder for MockHttpRequestSender
type MockHttpRequestSenderMockRecorder struct {
	mock *MockHttpRequestSender
}

// NewMockHttpRequestSender creates a new mock instance
func NewMockHttpRequestSender(ctrl *gomock.Controller) *MockHttpRequestSender {
	mock := &MockHttpRequestSender{ctrl: ctrl}
	mock.recorder = &MockHttpRequestSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpRequestSender) EXPECT() *MockHttpRequestSenderMockRecorder {
	return m.recorder
}

// SendHttpRequest mocks base method
func (m *MockHttpRequestSender) SendHttpRequest(arg0, arg1 string, arg2 map[string]string, arg3 io.Reader) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHttpRequest", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendHttpRequest indicates an expected call of SendHttpRequest
func (mr *MockHttpRequestSenderMockRecorder) SendHttpRequest(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHttpRequest", reflect.TypeOf((*MockHttpRequestSender)(nil).SendHttpRequest), arg0, arg1, arg2, arg3)
}
