// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nkasozi/refurbed-async-http-lib/http (interfaces: AsyncHttpRequestSender)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/nkasozi/refurbed-async-http-lib/http/models"
	reflect "reflect"
)

// MockAsyncHttpRequestSender is a mock of AsyncHttpRequestSender interface
type MockAsyncHttpRequestSender struct {
	ctrl     *gomock.Controller
	recorder *MockAsyncHttpRequestSenderMockRecorder
}

// MockAsyncHttpRequestSenderMockRecorder is the mock recorder for MockAsyncHttpRequestSender
type MockAsyncHttpRequestSenderMockRecorder struct {
	mock *MockAsyncHttpRequestSender
}

// NewMockAsyncHttpRequestSender creates a new mock instance
func NewMockAsyncHttpRequestSender(ctrl *gomock.Controller) *MockAsyncHttpRequestSender {
	mock := &MockAsyncHttpRequestSender{ctrl: ctrl}
	mock.recorder = &MockAsyncHttpRequestSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAsyncHttpRequestSender) EXPECT() *MockAsyncHttpRequestSenderMockRecorder {
	return m.recorder
}

// SendHttpRequestAsync mocks base method
func (m *MockAsyncHttpRequestSender) SendHttpRequestAsync(arg0 models.AsyncHttpRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHttpRequestAsync", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHttpRequestAsync indicates an expected call of SendHttpRequestAsync
func (mr *MockAsyncHttpRequestSenderMockRecorder) SendHttpRequestAsync(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHttpRequestAsync", reflect.TypeOf((*MockAsyncHttpRequestSender)(nil).SendHttpRequestAsync), arg0)
}

// ShutDown mocks base method
func (m *MockAsyncHttpRequestSender) ShutDown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShutDown")
}

// ShutDown indicates an expected call of ShutDown
func (mr *MockAsyncHttpRequestSenderMockRecorder) ShutDown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutDown", reflect.TypeOf((*MockAsyncHttpRequestSender)(nil).ShutDown))
}
